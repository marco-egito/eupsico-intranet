// Importe as fun√ß√µes necess√°rias do SDK do Firebase que voc√™ est√° usando
// Lembre-se de configurar seu arquivo firebase-config.js com suas credenciais
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js";
import { getAuth, onAuthStateChanged, GoogleAuthProvider, signInWithRedirect, signOut } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-auth.js";
import { getFirestore } from "https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js";

// --- CONFIGURA√á√ÉO DO FIREBASE ---
// Cole aqui a configura√ß√£o do seu projeto Firebase
const firebaseConfig = {
  apiKey: "AIzaSyCLeWW39nqxsdv1YD-CNa9RSTv05lGHJxM",
  authDomain: "eupsico-agendamentos-d2048.firebaseapp.com",
  databaseURL: "https://eupsico-agendamentos-d2048-default-rtdb.firebaseio.com",
  projectId: "eupsico-agendamentos-d2048",
  storageBucket: "eupsico-agendamentos-d2048.firebasestorage.app",
  messagingSenderId: "1041518416343",
  appId: "1:1041518416343:web:3a0abc73404ccd51d7bb92"
};

// Inicializa o Firebase
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);

// Para facilitar o acesso no console durante o desenvolvimento (opcional)
window.auth = auth;
window.db = db;

// --- SELETORES DE ELEMENTOS DOM ---
// Buscando todos os elementos pelo ID, sem '#'
const authView = document.getElementById('auth-view');
const appView = document.getElementById('app-view');
const loginButton = document.getElementById('login-button');
const logoutButton = document.getElementById('logout-button');
const appContainer = document.getElementById('app-container');
const userInfo = document.getElementById('user-info');
const authMessage = document.getElementById('auth-message');


// --- L√ìGICA DE LOGOUT AUTOM√ÅTICO POR INATIVIDADE ---
let inactivityTimer;

function resetInactivityTimer() {
    // Limpa o timer anterior
    clearTimeout(inactivityTimer);
    // Define um novo timer de 30 minutos (1800000 milissegundos)
    inactivityTimer = setTimeout(() => {
        alert("Voc√™ foi desconectado por inatividade.");
        signOut(auth);
    }, 1800000); // 30 minutos
}

function stopInactivityTimer() {
    clearTimeout(inactivityTimer);
}

// Eventos que reiniciam o contador de inatividade
const activityEvents = ['mousemove', 'mousedown', 'keypress', 'scroll', 'touchstart'];

function setupActivityListeners() {
    activityEvents.forEach(event => {
        window.addEventListener(event, resetInactivityTimer, true);
    });
}

function removeActivityListeners() {
    activityEvents.forEach(event => {
        window.removeEventListener(event, resetInactivityTimer, true);
    });
}


// --- L√ìGICA DE RENDERIZA√á√ÉO DO CONTE√öDO PRINCIPAL ---
function renderModuleSelection() {
    // Exemplo de como renderizar os m√≥dulos na tela principal
    appContainer.innerHTML = `
        <h2 class="page-title">Bem-vindo(a)! Selecione um m√≥dulo para come√ßar.</h2>
        <div class="module-selection">
            <div class="module-card">
                <div class="module-card-icon"><span>üìÖ</span></div>
                <div class="module-card-text">
                    <h3>Agendamentos</h3>
                    <p>Gerenciar consultas e hor√°rios.</p>
                </div>
            </div>
            <div class="module-card">
                <div class="module-card-icon"><span>üë•</span></div>
                <div class="module-card-text">
                    <h3>Pacientes</h3>
                    <p>Visualizar prontu√°rios e informa√ß√µes.</p>
                </div>
            </div>
            </div>
    `;
}

// --- CONTROLE PRINCIPAL DE AUTENTICA√á√ÉO E EVENTOS ---

// Fun√ß√£o que monitora o estado da autentica√ß√£o do usu√°rio
onAuthStateChanged(auth, (user) => {
    if (user) {
        // --- USU√ÅRIO EST√Å LOGADO ---
        console.log("Usu√°rio logado:", user.email);

        // Atualiza a interface
        userInfo.textContent = user.displayName || user.email; // Mostra o nome ou o email
        authView.classList.add('hidden');    // Esconde a tela de login
        appView.classList.remove('hidden'); // Mostra a tela principal do app

        // Renderiza o conte√∫do principal da aplica√ß√£o
        renderModuleSelection();

        // Inicia o monitoramento de inatividade
        setupActivityListeners();
        resetInactivityTimer();

    } else {
        // --- USU√ÅRIO EST√Å DESLOGADO ---
        console.log("Nenhum usu√°rio logado.");

        // Atualiza a interface
        authView.classList.remove('hidden'); // Mostra a tela de login
        appView.classList.add('hidden');     // Esconde a tela principal do app
        
        // Garante que a mensagem e o bot√£o de login estejam vis√≠veis
        authMessage.textContent = 'Por favor, fa√ßa o login para continuar.';
        loginButton.classList.remove('hidden'); // <-- MUITO IMPORTANTE: Mostra o bot√£o

        // Para o monitoramento de inatividade
        stopInactivityTimer();
        removeActivityListeners();
    }
});


// --- EVENT LISTENERS PARA BOT√ïES ---

// Evento de clique para o bot√£o de LOGIN
loginButton.addEventListener('click', () => {
    const provider = new GoogleAuthProvider();
    // signInWithRedirect √© recomendado para uma melhor experi√™ncia em dispositivos m√≥veis
    signInWithRedirect(auth, provider);
});

// Evento de clique para o bot√£o de LOGOUT
logoutButton.addEventListener('click', () => {
    signOut(auth).catch((error) => {
        console.error("Erro ao fazer logout:", error);
    });
});